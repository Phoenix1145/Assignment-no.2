use mavenmovies;
-- Basic Aggregate Functions

-- Assignment No. 2

-- Q.1.  Retrieve the total number of rentals made in the sakila database?
-- Ans. 
        SELECT 
    COUNT(rental_id)
FROM
    rental;

-- Q.2.  Find the average rental duration (in days) of movies rented from the sakila database
-- Ans. 
       SELECT 
    AVG(rental_duration)
FROM
    film;
       
-- String Funtions 

-- Q.3.  Display the first name and last name of customers in uppercase
-- Ans. 
       SELECT 
    UPPER(first_name), UPPER(last_name)
FROM
    customer;
       
-- Q.4.  Extract the month from the rental date and display it alongside the rental ID.
-- Ans. 
       SELECT 
    rental_id, MONTH(rental_date)
FROM
    rental;
       
-- Group by:

-- Q.5.  Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
-- Ans.
       SELECT 
    Customer_id, COUNT(rental_id)
FROM
    rental
GROUP BY customer_id;
       
-- Q.6.  Find the total revenue generated by each store.
-- Ans. 
       SELECT 
    st.store_id, SUM(p.amount) AS total_revenue
FROM
    payment p
        INNER JOIN
    staff sf ON sf.staff_id = p.staff_id
        INNER JOIN
    store st ON st.store_id = sf.store_id
GROUP BY st.store_id;

-- Joins:

-- Q.7. Display the title of the movie, customer's first name and last name who rented it.
-- Ans. 
       SELECT 
    title, first_name, last_name
FROM
    film
        INNER JOIN
    inventory ON film.film_id = inventory.film_id
        INNER JOIN
    rental ON rental.inventory_id = inventory.inventory_id
        INNER JOIN
    customer ON customer.customer_id = rental.customer_id;
    
-- Q.8. Retrieve the names of all actors who have appeared in the film "Gone with the Wind".
-- Ans.
        SELECT 
    first_name
FROM
    actor
        INNER JOIN
    film_actor ON actor.actor_id = film_actor.actor_id
        INNER JOIN
    film ON film.film_id = film_actor.actor_id
WHERE
    title = 'Gone with the Wind';
    
-- Group by:

-- Q.1. Determine the total number of rentals for each category of movies.
-- Ans. 
       SELECT 
    category_id, COUNT(rental_id) AS total_rentals
FROM
    film_category
        INNER JOIN
    film ON film.film_id = film_category.film_id
        INNER JOIN
    inventory ON inventory.film_id = film.film_id
        INNER JOIN
    rental ON rental.inventory_id = inventory.inventory_id
GROUP BY category_id;

-- Q.2. Find the average rental rate of movies in each language.
-- Ans. 
        select name, avg(rental_rate) from language inner join film on language.language_id = film.language_id group by name;
        
-- Joins:

-- Q.3. Retrieve the customer names along with the total amount they've spent on rentals.
-- Ans. 
       SELECT 
    CONCAT(first_name, ' ', last_name) AS Names,
    SUM(amount) AS toatal_amount
FROM
    customer
        INNER JOIN
    payment ON customer.customer_id = payment.payment_id
        INNER JOIN
    rental ON rental.rental_id = payment.rental_id
GROUP BY customer.customer_id;

-- Q.4. List the titles of movies rented by each customer in a particular city (e.g. 'London').
-- Ans. 
       SELECT 
    f.title, c.customer_id, city
FROM
    film f
        INNER JOIN
    inventory iv ON iv.film_id = f.film_id
        INNER JOIN
    rental r ON r.inventory_id = iv.inventory_id
        INNER JOIN
    customer c ON c.customer_id = r.customer_id
        INNER JOIN
    address ad ON ad.address_id = c.address_id
        INNER JOIN
    city ct ON ct.city_id = ad.city_id
GROUP BY c.customer_id , f.title;

-- Advanced Joins and Group by:

-- Q.5. Display the top 5 rented alongwith the number of times they've been rented.
-- Ans. 
       SELECT 
    f.title, COUNT(r.rental_id) AS total_rentals
FROM
    film f
        INNER JOIN
    inventory iv ON iv.film_id = f.film_id
        INNER JOIN
    rental r ON r.inventory_id = iv.inventory_id
GROUP BY f.title
ORDER BY total_rentals DESC
LIMIT 5;

-- Q.4. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Ans. 
       SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS name,
    st.store_id
FROM
    customer c
        INNER JOIN
    rental r ON r.customer_id = c.customer_id
        INNER JOIN
    inventory iv ON iv.inventory_id = r.customer_id
        INNER JOIN
    store st ON st.store_id = iv.store_id
WHERE
    st.store_id IN (1 , 2)
GROUP BY c.customer_id , st.store_id , name
HAVING COUNT(DISTINCT st.store_id);

    